<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="me._hanho.ds.mapper.ScheduleMapper">
	<select id="getSchedules">
		SELECT 
		    s.schedule_code,
		    s.schedule_enrol_start_date,
		    s.schedule_enrol_end_date,
		    s.schedule_start_date,
		    s.schedule_start_date_add_date,
		    <!-- CAST(JSON_UNQUOTE(JSON_EXTRACT(s.schedule_after_date, '$')) AS CHAR) AS schedule_after_date_JSON, -->
		    s.schedule_after_date AS schedule_after_date_JSON,
		    p.program_name AS title,
		    p.time,
		    s.online,
		    s.part_type,
		    s.enrol_limit,
		    (
		        SELECT COUNT(*)
		        FROM ds_enroll e
		        WHERE e.s_id = s.s_id
		    ) AS enrol_count,
		    s.schedule_status,
		    s.schedule_group_num,
		    p.program_code,
		    pc.title AS group_title,
		    CASE 
		        WHEN EXISTS (
		            SELECT 1 
		            FROM ds_enroll e_sub 
		            WHERE e_sub.s_id = s.s_id AND e_sub.login_id = #{login_id}
		        ) THEN 1
		        ELSE 0
		    END AS my_enrol_status
		FROM ds_schedule s
		JOIN ds_program p ON p.program_num = s.program_num
		JOIN ds_program_category pc ON p.category_num = pc.cate_num
		WHERE s.open_status = 1
		ORDER BY s.schedule_start_date DESC
	</select>
	<select id="getSchedule">
		SELECT 
		    s.schedule_code,
		    s.schedule_enrol_start_date,
		    s.schedule_enrol_end_date,
		    s.schedule_start_date,
		    s.schedule_start_date_add_date,
		    <!-- JSON_UNQUOTE(JSON_EXTRACT(s.schedule_after_date, '$')) AS schedule_after_date_JSON, -->
		    s.schedule_after_date AS schedule_after_date_JSON,
		    p.program_name AS title,
		    p.time,
		    s.online,
		    s.part_type,
		    s.enrol_limit,
		    (
		        SELECT COUNT(*)
		        FROM ds_enroll e
		        WHERE e.s_id = s.s_id
		    ) AS enrol_count,
		    s.schedule_status,
		    s.schedule_group_num,
		    p.program_code,
		    pc.title AS group_title,
		    CASE 
		        WHEN EXISTS (
		            SELECT 1 
		            FROM ds_enroll e_sub 
		            WHERE e_sub.s_id = s.s_id AND e_sub.login_id = #{login_id}
		        ) THEN 1
		        ELSE 0
		    END AS my_enrol_status
		FROM ds_schedule s
		JOIN ds_program p ON p.program_num = s.program_num
		JOIN ds_program_category pc ON p.category_num = pc.cate_num
		WHERE s.open_status = 1 AND schedule_code = #{schedule_code}
		ORDER BY s.schedule_start_date DESC
	</select>
	<insert id="createEnroll">
		INSERT INTO ds_enroll(s_id, login_id)
		VALUES ((SELECT s_id FROM ds_schedule WHERE schedule_code = #{schedule_code}), #{login_id})
	</insert>
	<select id="getEnrolls">
		SELECT
		    s.schedule_code,
		    s.schedule_start_date,
		    e.enrol_id,
		    p.program_name AS title,
		    COALESCE(w.enrol_waiting_rank, 0) AS enrol_waiting_rank
		FROM ds_enroll e
		JOIN ds_schedule s ON s.s_id = e.s_id
		JOIN ds_program p ON p.program_num = s.program_num
		LEFT JOIN (
		    SELECT 
		        re.enrol_id,
		        re.s_id,
		        re.row_num - s.enrol_limit AS enrol_waiting_rank
		    FROM (
		        SELECT 
		            e.enrol_id,
		            e.s_id,
		            e.login_id,
		            @row_number := IF(@current_s_id = e.s_id, @row_number + 1, 1) AS row_num,
		            @current_s_id := e.s_id
		        FROM ds_enroll e
		        CROSS JOIN (SELECT @row_number := 0, @current_s_id := NULL) vars
		        ORDER BY e.s_id, e.created_at ASC
		    ) re
		    JOIN ds_schedule s ON re.s_id = s.s_id
		    WHERE re.row_num > s.enrol_limit
		) w ON e.enrol_id = w.enrol_id
		WHERE e.login_id = #{login_id}
	</select>
	<delete id="deleteEnroll">
		DELETE FROM ds_enroll
		WHERE login_id = #{login_id} and s_id = (SELECT s_id FROM ds_schedule WHERE schedule_code = #{schedule_code}) 
	</delete>
	<insert id="createCancelLog">
		INSERT INTO ds_cancel_log(reason, flag, s_id, login_id, executor)
		VALUES (#{reason}, #{flag}, (SELECT s_id FROM ds_schedule WHERE schedule_code = #{schedule_code}), #{login_id}, #{login_id})
	</insert>
</mapper>