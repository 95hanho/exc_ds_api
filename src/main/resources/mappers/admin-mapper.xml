<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="me._hanho.ds.mapper.AdminMapper">
	<select id="getAdminSchedules">
		SELECT 
		    s.schedule_code,
		    s.schedule_number,
		    s.schedule_enrol_start_date,
		    s.schedule_enrol_end_date,
		    s.schedule_start_date,
		    s.schedule_start_date_add_date,
		    -- JSON 관련 처리는 MariaDB 10.2 이상에서만 가능
		    s.schedule_after_date AS schedule_after_date_JSON,
		    p.program_name AS title,
		    p.time,
		    s.online,
		    s.part_type,
		    s.enrol_limit,
		    (
		        SELECT COUNT(*)
		        FROM ds_enroll e_sub
		        WHERE e_sub.s_id = s.s_id
		    ) AS enrol_count,
		    s.schedule_status,
		    s.open_status,
		    SUM(CASE WHEN e.attendance_type = 'Y' THEN 1 ELSE 0 END) AS attendance_count,
		    s.schedule_group_num,
		    p.program_code,
		    pc.title AS group_title
		FROM ds_schedule s
		JOIN ds_program p ON p.program_num = s.program_num
		JOIN ds_program_category pc ON p.category_num = pc.cate_num
		LEFT JOIN ds_enroll e ON e.s_id = s.s_id
		GROUP BY 
		    s.s_id, 
		    s.schedule_code, 
		    s.schedule_number, 
		    s.schedule_enrol_start_date, 
		    s.schedule_enrol_end_date, 
		    s.schedule_start_date, 
		    s.schedule_start_date_add_date, 
		    s.schedule_after_date, 
		    p.program_name, 
		    p.time, 
		    s.online, 
		    s.part_type, 
		    s.enrol_limit, 
		    s.schedule_status, 
		    s.open_status, 
		    s.schedule_group_num, 
		    p.program_code, 
		    pc.title
		ORDER BY s.schedule_start_date DESC;
	</select>
	<select id="getAdminSchedule">
		SELECT 
		    s.schedule_code,
		    s.schedule_number,
		    s.schedule_enrol_start_date,
		    s.schedule_enrol_end_date,
		    s.schedule_start_date,
		    s.schedule_start_date_add_date,
		    s.schedule_after_date AS schedule_after_date_JSON,
		    p.program_name AS title,
		    p.time,
		    s.online,
		    s.part_type,
		    s.enrol_limit,
		    (
		        SELECT COUNT(*)
		        FROM ds_enroll e
		        WHERE e.s_id = s.s_id
		    ) AS enrol_count,
		    s.schedule_status,
		    s.open_status,
		    COUNT(CASE WHEN e.attendance_type = 'Y' THEN 1 END) AS attendance_count,
		    s.schedule_group_num,
		    p.program_code,
		    pc.title AS group_title
		FROM ds_schedule s
		JOIN ds_program p ON p.program_num = s.program_num
		JOIN ds_program_category pc ON p.category_num = pc.cate_num
		LEFT JOIN ds_enroll e ON e.s_id = s.s_id
		WHERE s.schedule_code = #{schedule_code}
		GROUP BY s.s_id
		ORDER BY s.schedule_start_date DESC
	</select>
	<select id="getAdminSchedule2">
		SELECT 
		    s.schedule_code,
		    s.schedule_number,
		    s.schedule_enrol_start_date,
		    s.schedule_enrol_end_date,
		    s.schedule_start_date,
		    s.schedule_start_date_add_date,
		    s.schedule_after_date AS schedule_after_date_JSON,
		    p.program_name AS title,
		    p.time,
		    s.online,
		    s.part_type,
		    s.enrol_limit,
		    (
		        SELECT COUNT(*)
		        FROM ds_enroll e
		        WHERE e.s_id = s.s_id
		    ) AS enrol_count,
		    s.schedule_status,
		    s.open_status,
		    s.schedule_group_num,
		    p.program_code,
		    pc.title AS group_title
		FROM ds_schedule s
		JOIN ds_program p ON p.program_num = s.program_num
		JOIN ds_program_category pc ON p.category_num = pc.cate_num
		WHERE s.s_id = (SELECT s_id FROM ds_enroll WHERE enrol_id = #{enroll_id})
	</select>
	<select id="getScheduleLatest">
		SELECT *
		FROM ds_schedule
		ORDER BY s_id DESC limit 1
	</select>
	<insert id="setSchedule">
		INSERT INTO ds_schedule(schedule_code, schedule_enrol_start_date, schedule_enrol_end_date, schedule_start_date, 
		online, part_type, enrol_limit, schedule_number, program_num)
		VALUES (#{schedule_code}, #{schedule_enrol_start_date}, #{schedule_enrol_end_date}, #{schedule_start_date},
		#{online}, #{part_type}, #{enrol_limit}, #{schedule_number}, 
		(SELECT program_num FROM ds_program WHERE program_code = #{program_code}))
	</insert>
	<update id="updateSchedule">
		UPDATE ds_schedule
		SET schedule_start_date = #{schedule_start_date},
		online = #{online},
		part_type = #{part_type}, schedule_number = #{schedule_number},
		schedule_start_date_add_date = #{schedule_start_date_add_date},
		schedule_after_date = #{schedule_after_date_JSON}
		WHERE schedule_code = #{schedule_code}
	</update>
	<update id="updateProgramTime">
		UPDATE ds_program
		SET time = #{time}
		WHERE program_num = (SELECT program_num FROM ds_schedule WHERE schedule_code = #{schedule_code})
	</update>
	
	<update id="updateScheduleStatus">
		UPDATE ds_schedule
		SET schedule_status = 1 - schedule_status
		WHERE schedule_code IN
	    <foreach item="schedule_code" index="index" collection="schedule_codes" open="(" separator="," close=")">
	        #{schedule_code}
	    </foreach>
	</update>
	<update id="updateScheduleOpenStatus">
		UPDATE ds_schedule
		SET open_status = 1 - open_status
		WHERE schedule_code IN
	    <foreach item="schedule_code" index="index" collection="schedule_codes" open="(" separator="," close=")">
	        #{schedule_code}
	    </foreach>
	</update>
	<select id="getAdminStudents">
		SELECT
		    e.enrol_id,
		    e.created_at AS enrol_regdate,
		    ws.enrol_waiting_status,
		    e.attendance_type,
		    e.attendance_msg,
		    e.attendance_description,
		    u.member_email,
		    u.member_hp,
		    u.member_insa_number,
		    u.member_no,
		    u.member_type,
		    u.team_name,
		    e.login_id AS member_login_id,
		    u.name AS member_name
		FROM ds_enroll e
		JOIN ds_user u ON e.login_id = u.login_id
		JOIN (
		    SELECT 
		        re.enrol_id,
		        re.s_id,
		        re.row_num > s.enrol_limit AS enrol_waiting_status
		    FROM (
		        SELECT 
		            e.enrol_id,
		            e.s_id,
		            e.created_at AS enrol_regdate,
		            @row_number := IF(@current_s_id = e.s_id, @row_number + 1, 1) AS row_num,
		            @current_s_id := e.s_id
		        FROM ds_enroll e
		        CROSS JOIN (SELECT @row_number := 0, @current_s_id := NULL) vars
		        ORDER BY e.s_id, e.created_at ASC
		    ) re
		    JOIN ds_schedule s ON re.s_id = s.s_id
		) ws ON e.enrol_id = ws.enrol_id
		WHERE e.s_id = (SELECT s_id FROM ds_schedule WHERE schedule_code = #{schedule_code})
	</select>
	<select id="getStudents">
		SELECT u.member_no, u.name, u.member_type, u.member_hp, u.member_email, 
		s.schedule_number, s.schedule_start_date, p.program_name, u.team_name, e.created_at, 
		e.attendance_msg, e.attendance_description
		FROM ds_user u
		JOIN ds_enroll e ON e.login_id = u.login_id
		JOIN ds_schedule s ON e.s_id = s.s_id
		JOIN ds_program p ON p.program_num = s.program_num
		WHERE schedule_code IN
	    <foreach item="schedule_code" index="index" collection="schedule_codes" open="(" separator="," close=")">
	        #{schedule_code}
	    </foreach>
	</select>
	<select id="getStudentsWithoutWait">
		SELECT 
		    u.member_no, 
		    u.name, 
		    u.member_type, 
		    u.member_hp, 
		    u.member_email, 
		    s.schedule_number, 
		    s.schedule_start_date, 
		    p.program_name, 
		    u.team_name, 
		    e.created_at, 
		    e.attendance_msg, 
		    e.attendance_description
		FROM ds_user u
		JOIN ds_enroll e ON e.login_id = u.login_id
		JOIN ds_schedule s ON e.s_id = s.s_id
		JOIN ds_program p ON p.program_num = s.program_num
		JOIN (
		    SELECT 
		        re.enrol_id,
		        re.s_id,
		        re.row_num > s.enrol_limit AS enrol_waiting_status
		    FROM (
		        SELECT 
		            e.enrol_id,
		            e.s_id,
		            e.created_at AS enrol_regdate,
		            @row_number := IF(@current_s_id = e.s_id, @row_number + 1, 1) AS row_num,
		            @current_s_id := e.s_id
		        FROM ds_enroll e
		        CROSS JOIN (SELECT @row_number := 0, @current_s_id := NULL) vars
		        ORDER BY e.s_id, e.created_at ASC
		    ) re
		    JOIN ds_schedule s ON re.s_id = s.s_id
		) ws ON e.enrol_id = ws.enrol_id
		WHERE s.schedule_code IN 
		    <foreach item="schedule_code" index="index" collection="schedule_codes" open="(" separator="," close=")">
	        	#{schedule_code}
	    	</foreach> AND ws.enrol_waiting_status = false
		    AND ws.enrol_waiting_status = FALSE;
	</select>
	<update id="updatePresent">
		UPDATE ds_enroll
		SET attendance_type = #{type}, attendance_msg = #{msg}, attendance_description = #{description}
		WHERE s_id = (SELECT s_id FROM ds_schedule WHERE schedule_code = #{schedule_code})
		AND login_id IN
	    <foreach item="member_no" index="index" collection="member_nos" open="(" separator="," close=")">
	        (SELECT login_id FROM ds_user WHERE member_no = #{member_no})
	    </foreach>
	</update>
	<delete id="deleteStudent">
		DELETE e
		FROM ds_enroll e
		JOIN (
		    SELECT s_id FROM ds_enroll WHERE enrol_id = #{enroll_id}
		) temp ON e.s_id = temp.s_id
		JOIN ds_user u ON e.login_id = u.login_id
		WHERE u.member_no = #{member_no};
	</delete>
	<select id="getMember_no">
		SELECT member_no
		FROM ds_user
		WHERE login_id = (SELECT login_id FROM ds_enroll WHERE enrol_id = #{enrol_id})
	</select>
	<delete id="deleteStudent2">
		DELETE FROM ds_enroll
		WHERE login_id = (SELECT login_id FROM ds_user WHERE member_no = #{member_no}) 
		AND s_id = (SELECT s_id FROM ds_schedule WHERE schedule_code = #{schedule_code}) 
	</delete>
	<update id="createCancelLog">
		INSERT INTO ds_cancel_log(reason, flag, s_id, login_id, executor)
		VALUES (#{reason}, '취소', (SELECT s_id FROM ds_schedule WHERE schedule_code = #{schedule_code}), 
		(SELECT login_id FROM ds_user WHERE member_no = #{member_no}),
		#{executor})
	</update>
	<update id="createCancelLog2">
		INSERT INTO ds_cancel_log(flag, s_id, login_id, executor)
		VALUES (#{flag}, (SELECT s_id FROM ds_enroll WHERE enrol_id = #{enroll_id}), 
		(SELECT login_id FROM ds_user WHERE member_no = #{member_no}),
		#{login_id})
	</update>
	<update id="updateStudent">
		UPDATE ds_enroll
		SET login_id = (SELECT login_id FROM ds_user WHERE member_no = #{member_no})
		WHERE enrol_id = #{enroll_id}
	</update>
	<!-- -->
	<select id="userSearch">
		SELECT login_id AS member_login_id, name AS member_name, member_no, member_type, member_hp,
		member_insa_number, team_name
		FROM ds_user
		WHERE 
			CASE 
	        WHEN #{type} = 'login_id' THEN login_id LIKE CONCAT('%', #{keyword}, '%')
	        WHEN #{type} = 'name' THEN name LIKE CONCAT('%', #{keyword}, '%')
	        WHEN #{type} = 'member_hp' THEN member_hp LIKE CONCAT('%', #{keyword}, '%')
	        WHEN #{type} = 'member_insa_number' THEN member_insa_number LIKE CONCAT('%', #{keyword}, '%')
	        ELSE FALSE
	    END;
	</select>
	<select id="getLogs">
		SELECT reason AS cancel_msg, 
		cl.created_at AS change_date, 
		executor, flag, 
		program_name, schedule_code, schedule_number AS schedule_index, program_name AS title
		FROM ds_cancel_log cl
		JOIN ds_schedule s ON cl.s_id = s.s_id
		JOIN ds_program p ON s.program_num = p.program_num
		WHERE cl.login_id = (SELECT login_id FROM ds_user WHERE member_no = #{member_no})
		ORDER BY cl.created_at DESC
	</select>
	<select id="getEnrolls">
		SELECT 
		    e.enrol_id, 
		    COALESCE(w.enrol_waiting_rank, 0) AS enrol_waiting_rank,
		    s.schedule_code, 
		    s.schedule_start_date, 
		    p.program_name AS title
		FROM ds_enroll e
		JOIN ds_schedule s ON e.s_id = s.s_id
		JOIN ds_program p ON s.program_num = p.program_num
		LEFT JOIN (
		    SELECT 
		        re.enrol_id,
		        re.s_id,
		        re.row_num - s.enrol_limit AS enrol_waiting_rank
		    FROM (
		        SELECT 
		            e.enrol_id,
		            e.s_id,
		            e.login_id,
		            @row_number := IF(@current_s_id = e.s_id, @row_number + 1, 1) AS row_num,
		            @current_s_id := e.s_id
		        FROM ds_enroll e
		        CROSS JOIN (SELECT @row_number := 0, @current_s_id := NULL) vars
		        ORDER BY e.s_id, e.created_at ASC
		    ) re
		    JOIN ds_schedule s ON re.s_id = s.s_id
		    WHERE re.row_num > s.enrol_limit
		) w ON e.enrol_id = w.enrol_id
		WHERE e.login_id = (SELECT login_id FROM ds_user WHERE member_no = #{member_no})
		ORDER BY e.created_at DESC;
	</select>
	<update id="updateUser">
		UPDATE ds_user
		SET member_hp = #{member_hp}, member_type = #{member_type}, team_name = #{team_name}
		WHERE member_no = #{member_no}
	</update>
	<!-- -->
	<select id="getProgramCategory">
		SELECT *
		FROM ds_program_category;
	</select>
	<select id="getPrograms2">
		SELECT p.program_num, program_code, program_name, program_status, 
		f.filePath AS program_header_img_url_v2, 
		program_new_label, program_hash_tag, time, time_ment, place, program_content, category_num
		FROM ds_program p
		JOIN ds_file f ON p.program_num = f.program_num
		WHERE category_num = #{category_num}
	</select>
	<select id="getProgramLatest">
		SELECT *
		FROM ds_program
		order by program_num desc limit 1
	</select>
	<insert id="createProgram">
		INSERT INTO ds_program(program_code, program_name, program_status, program_new_label, program_hash_tag, time, time_ment, place, program_content, category_num)
		VALUES (#{program_code}, #{program_name}, 'N', 'Y', #{program_hash_tag}, #{time}, #{time_ment}, #{place}, #{program_content}, 
		(SELECT cate_num FROM ds_program_category WHERE title = #{program_category})) 
	</insert>
	<update id="updateProgram">
		UPDATE ds_program
		SET program_name = #{program_name}, program_new_label = #{program_new_label},
		program_hash_tag = #{program_hash_tag}, time = #{time}, time_ment = #{time_ment},
		place = #{place}, program_content = #{program_content},
		category_num = (SELECT cate_num FROM ds_program_category WHERE title = #{program_category})
		WHERE program_num = #{program_num}
	</update>
	<update id="updateProgram_status">
		UPDATE ds_program
		SET program_status = CASE 
		                        WHEN program_status = 'Y' THEN 'N'
		                        ELSE 'Y'
		                     END
		WHERE program_code = #{program_code}
	</update>
	<!-- -->
	<select id="getCancels">
		SELECT id, reason, flag, cl.created_at, s_id, u.name AS login_id, u2.name AS executor
		FROM ds_cancel_log cl
		JOIN ds_user u ON u.login_id = cl.login_id
		JOIN ds_user u2 ON u2.login_id = cl.executor
		WHERE flag = '취소'
		ORDER BY cl.created_at ASC
	</select>
	<select id="getPopups">
		SELECT p.popup_id AS type, status, name
		FROM ds_popup p 
		JOIN ds_file f ON f.popup_id = p.popup_id
	</select>
	
	<update id="updatePopup">
		UPDATE ds_popup
		SET status = #{file_status}
		WHERE popup_id = #{type}
	</update>
	<insert id="createReview">
		INSERT INTO ds_review(rate, contents, regdate, writer, program_num)
		VALUES (#{review_ring_rate}, #{review_content}, #{review_enrol_date}, #{review_name}, 
		(SELECT program_num FROM ds_program WHERE program_code = #{program_code}))
	</insert>

</mapper>